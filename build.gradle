plugins {
    id 'java-gradle-plugin'
    id 'maven-publish'
    id 'groovy'
    id 'jacoco'
}

// Plugin configuration from gradle.properties
group = providers.gradleProperty('library.group').getOrElse('com.lastbenchcap')
version = providers.gradleProperty('library.version').getOrElse('1.0.0')

// Version management
final String libraryVersion = providers.gradleProperty('library.version').getOrElse(version)
final String githubOwner = providers.environmentVariable('GITHUB_REPOSITORY_OWNER')
    .orElse(providers.gradleProperty('github.owner').orElse('rmarap'))
    .get()
final String githubRepo = providers.environmentVariable('GITHUB_REPOSITORY')
    .map { it.split('/').last() }
    .orElse(providers.gradleProperty('github.repo').orElse(name))
    .get()
final String libraryName = providers.gradleProperty('library.name').getOrElse("${name} Plugin")
final String libraryDescription = providers.gradleProperty('library.description').getOrElse("A Gradle plugin for ${name}")

base {
    archivesName = providers.gradleProperty('library.artifactId').getOrElse(name)
}

// Declare Gradle plugins provided by this project
gradlePlugin {
    plugins {
        commonLibrary {
            id = 'com.lastbenchcap.common.gradle'
            implementationClass = 'com.lastbenchcap.common.gradle.CommonLibraryPlugin'
            displayName = libraryName
            description = libraryDescription
        }
        repoManagementSettings {
            id = 'com.lastbenchcap.repo-management-settings'
            implementationClass = 'com.lastbenchcap.common.gradle.RepoManagementSettingsPlugin'
            displayName = 'LastBenchCap Repo Management Settings Plugin'
            description = 'Centralizes repository configuration (GitHub Packages, mavenLocal, mavenCentral) in settings.gradle'
        }
    }
}

java {
    def javaVersion = providers.gradleProperty('java.version').getOrElse('21')
    toolchain {
        languageVersion = JavaLanguageVersion.of(Integer.parseInt(javaVersion))
    }
}

// Register tasks for creating source and javadoc JARs
tasks.register('sourcesJar', Jar) {
    from sourceSets.main.allSource
    archiveClassifier = 'sources'
}

tasks.register('javadocJar', Jar) {
    from javadoc
    archiveClassifier = 'javadoc'
}

repositories {
    mavenCentral()
}

// Plugin-specific dependencies
dependencies {
    implementation gradleApi()
    implementation localGroovy()
}

tasks.named('test') {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
    finalizedBy tasks.named('jacocoTestReport')
}

jacoco {
    toolVersion = providers.gradleProperty('jacoco.tool.version').getOrElse('0.8.11')
}

tasks.named('jacocoTestReport') {
    dependsOn tasks.named('test')
    reports {
        xml.required = true
        csv.required = true
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            groupId = providers.gradleProperty('library.group').getOrElse('com.lastbenchcap')
            artifactId = providers.gradleProperty('library.artifactId').getOrElse(name)
            version = version
            artifact tasks.named('sourcesJar')
            artifact tasks.named('javadocJar')
            pom {
                name = libraryName
                description = libraryDescription
                url = "https://github.com/${githubOwner}/${githubRepo}"
                licenses {
                    license {
                        name = providers.gradleProperty('license.name').getOrElse('MIT License')
                        url = providers.gradleProperty('license.url').getOrElse('https://opensource.org/licenses/MIT')
                    }
                }
                developers {
                    developer {
                        id = providers.gradleProperty('developer.id').getOrElse(githubOwner)
                        name = providers.gradleProperty('developer.name').getOrElse('LastBenchCap Team')
                        email = providers.gradleProperty('developer.email').getOrElse('team@lastbenchcap.com')
                    }
                }
                scm {
                    connection = "scm:git:git://github.com/${githubOwner}/${githubRepo}.git"
                    developerConnection = "scm:git:ssh://github.com/${githubOwner}/${githubRepo}.git"
                    url = "https://github.com/${githubOwner}/${githubRepo}"
                }
            }
        }
    }
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/${githubOwner}/${githubRepo}")
            credentials {
                username = providers.gradleProperty("gpr.user")
                    .orElse(providers.environmentVariable("GITHUB_USERNAME").orElse(providers.environmentVariable("USERNAME").orElse("github")))
                    .get()
                password = providers.gradleProperty("gpr.key")
                    .orElse(providers.environmentVariable("GITHUB_TOKEN").orElse(providers.environmentVariable("TOKEN").orElse("")))
                    .get()
            }
        }
    }
}